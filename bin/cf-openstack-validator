#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/validator/cli/cli'

options = {}
option_parser = OptionParser.new do |parser|
  parser.banner = 'Usage: cf-openstack-validator [options]'

  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end

  parser.on('-r', '--cpi-release RELEASE', 'CPI release path') do |release|
    options[:cpi_release] = release
  end

  parser.on('-s', '--stemcell STEMCELL', 'Stemcell path') do |stemcell|
    options[:stemcell] = stemcell
  end

  parser.on('-c', '--config CONFIG_FILE', 'Configuration YAML file path') do |config|
    options[:config] = config
  end

  parser.on('-w', '--working-directory DIR', 'Path used by the Validator to install CPI release and store needed artifacts.', 'Defaults is operating system temporary file path (optional)') do |working_dir|
    options[:working_dir] = working_dir
  end

  parser.on('-t', '--tag TAG', 'Run tests that match a specified RSpec tag (optional)') do |tag|
    options[:tag] = tag
  end

  parser.on('-k', '--skip-cleanup', 'Skip cleanup of OpenStack resources (optional)') do
    options[:skip_cleanup] = true
  end

  parser.on('-v', '--verbose', 'Print more output for failing tests (optional)') do
    options[:verbose] = true
  end

  parser.on('-f', '--fail-fast', 'Stop execution after the first test failure (optional)') do
    options[:fail_fast] = true
  end
end
option_parser.parse!

missing_required_options = []
[:cpi_release, :stemcell, :config].each do |required_option|
  if !options.include?(required_option)
    missing_required_options.push(required_option)
  end
end

if !missing_required_options.empty?
  STDERR.puts("Required options are missing: #{missing_required_options.map { |o| "--#{o.to_s.gsub('_', '-')}" }.join(", ")}")
  puts option_parser
  exit 1
end

context = Validator::Cli::Context.new(options)
validator = Validator::Cli::CfOpenstackValidator.create(context)
validator.run

begin
  validator.print_working_dir
  unless validator.installation_exists?
    validator.install_cpi_release
    validator.extract_stemcell
    validator.save_cpi_release_version
  end

  ok, installation_error_message = validator.check_installation?
  exit_on_error(ok, installation_error_message)

  validator.prepare_ruby_environment
  ok, validation_error_message = validator.generate_cpi_config
  exit_on_error(ok, validation_error_message)

  validator.print_gem_environment
  validator.execute_specs
rescue Validator::Cli::ErrorWithLogDetails => e
  puts "More details can be found in #{e.log_path}"
  Kernel.exit 1
end

def exit_on_error(ok, error_message)
  unless ok
    puts error_message
    exit 1
  end
end
