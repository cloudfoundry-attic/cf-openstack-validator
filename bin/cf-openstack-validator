#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/validator'

options = {}
option_parser = OptionParser.new do |parser|
  parser.banner = 'Usage: cf-openstack-validator [options]'

  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end

  parser.on('--cpi-release RELEASE', 'CPI release location') do |release|
    options[:cpi_release] = release
  end

  parser.on('-s', '--stemcell STEMCELL', 'Stemcell location') do |stemcell|
    options[:stemcell] = stemcell
  end

  parser.on('-c', '--config CONFIG_FILE', 'Configuration YAML file location') do |config|
    options[:config] = config
  end

  parser.on('-w', '--working-directory DIR', 'Working directory location (optional)') do |working_dir|
    options[:working_dir] = working_dir
  end

  parser.on('--tag TAG', 'Run examples that match a specified tag (optional)') do |tag|
    options[:tag] = tag
  end

  parser.on('--skip-cleanup', 'Skip cleanup of OpenStack resources (optional)') do
    options[:skip_cleanup] = 'TRUE'
  end

  parser.on('-v', '--verbose', 'Print more output for the failing tests (optional)') do
    options[:verbose] = 'TRUE'
  end

  parser.on('--fail-fast', 'Stop execution after the first test failure (optional)') do
    options[:fail_fast] = true
  end
end
option_parser.parse!

missing_required_options = []
[:cpi_release, :stemcell, :config].each do |required_option|
  if !options.include?(required_option)
    missing_required_options.push(required_option)
  end
end
if !missing_required_options.empty?
  STDERR.puts("Required options are missing: #{missing_required_options.map { |o| "--#{o.to_s.gsub('_', '-')}" }.join(", ")}")
  puts option_parser
  exit 1
end

validator = Validator::Cli::CfOpenstackValidator.create(options)
begin
  unless validator.installation_exists?
    validator.install_cpi_release(options[:cpi_release])
    validator.extract_stemcell(options[:stemcell]
    validator.save_cpi_release_version(options[:cpi_release])
  end
  ok, error = validator.check_installation?(options[:cpi_release])
  if ok
    validator.prepare_ruby_environment(validator.path_environment, validator.gems_folder, validator.bundle_command)
    validator.generate_cpi_config(options[:config])
    validator.print_gem_environment(validator.path_environment, validator.gems_folder, validator.bundle_command)
    validator.execute_specs(options[:config], validator.path_environment, validator.gems_folder, validator.bundle_command)
  else
    puts error
  end
rescue Validator::Cli::ErrorWithLogDetails => e
  puts "More details can be found in #{e.log_path}"
end

main_path = File.expand_path('../../validate', __FILE__)
cmd = "#{main_path} #{options[:cpi_release]} #{options[:stemcell]} #{options[:config]} #{working_dir}"
puts cmd
system(cmd)
